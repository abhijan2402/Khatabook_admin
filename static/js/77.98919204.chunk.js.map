{"version":3,"file":"static/js/77.98919204.chunk.js","mappings":"+TAUMA,EAAiB,WAEnB,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACI,gBAAKC,UAAU,2BAA0B,UACrC,mBAAQA,UAAU,0CAA0CC,QAAS,WALzEH,GAASI,EAAAA,EAAAA,IAAU,CAACC,MAAQ,eAAgBC,SAAWC,EAAAA,iBAAAA,eAK6C,EAAC,sBAG7G,EAgFA,MA9EA,WAEI,IAAOC,GAAUC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAI,IAAzCH,MACDR,GAAWC,EAAAA,EAAAA,MAqBjB,OAnBAW,EAAAA,EAAAA,YAAU,WACNZ,GAASa,EAAAA,EAAAA,MACb,GAAG,KAkBC,+BAEI,SAACC,EAAA,EAAS,CAACT,MAAM,gBAAgBU,UAAU,OAAOhB,gBAAgB,SAACA,EAAc,IAAI,UAGrF,gBAAKG,UAAU,yBAAwB,UACnC,mBAAOA,UAAU,eAAc,WAC3B,4BACA,2BACI,kCACA,sCACA,wCACA,oCACA,yCACA,wBAGJ,2BAEQM,EAAMQ,KAAI,SAACC,EAAGC,GACV,OACI,2BACA,yBACI,iBAAKhB,UAAU,8BAA6B,WACxC,gBAAKA,UAAU,SAAQ,UACnB,gBAAKA,UAAU,+BAA8B,UACzC,gBAAKiB,IAAKF,EAAEG,OAAQC,IAAI,gBAGhC,4BACI,gBAAKnB,UAAU,YAAW,SAAEe,EAAEK,cAC9B,gBAAKpB,UAAU,qBAAoB,SAAEe,EAAEM,qBAInD,wBAAKN,EAAEO,SACP,wBAAKC,IAAO,IAAIC,MAAQC,KAAK,GAAGT,EAAE,GAAI,QAAQU,OAAO,gBACrD,yBAnDRC,EAmD4BX,EAlD7CW,EAAQ,IAAM,GAAS,gBAAK3B,UAAU,QAAO,4BACxC2B,EAAQ,IAAM,GAAS,gBAAK3B,UAAU,sBAAqB,yBAC3D2B,EAAQ,IAAM,GAAS,gBAAK3B,UAAU,wBAAuB,kBAC7D2B,EAAQ,IAAM,GAAS,gBAAK3B,UAAU,qBAAoB,4BACtD,gBAAKA,UAAU,oBAAmB,sBA+ClB,wBAAKe,EAAEM,aACP,yBAAI,mBAAQrB,UAAU,2BAA2BC,QAAS,kBA7ChE,SAAC0B,GACvB7B,GAAS8B,EAAAA,EAAAA,IAAW,CAACD,MAAAA,KACrB7B,GAAS+B,EAAAA,EAAAA,IAAiB,CAACC,QAAU,gBAAiBC,OAAS,IACnE,CA0CgGC,CAAkBhB,EAAE,EAAC,UAAC,SAAC,IAAS,CAAChB,UAAU,cAlBlGgB,GAnClB,IAACW,CAwDA,cAQ5B,EClFA,MAbA,WACI,IAAM7B,GAAWC,EAAAA,EAAAA,MAOjB,OALAW,EAAAA,EAAAA,YAAU,WACNZ,GAASmC,EAAAA,EAAAA,IAAa,CAAE9B,MAAQ,UAClC,GAAG,KAID,SAAC,EAAK,GAEd,C,kEChBM+B,EAAQC,EAAQ,MAyBtB,IAAMC,EAAaF,EAAMG,YAvBzB,SAAmB,EAIhBC,GAAQ,IAHTnC,EAAK,EAALA,MACAoC,EAAO,EAAPA,QACGC,EAAK,OAER,OAAoBN,EAAMO,cAAc,MAAOC,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACR,cAAe,OACfC,IAAKX,EACL,kBAAmBC,GAClBC,GAAQrC,EAAqB+B,EAAMO,cAAc,QAAS,CAC3DS,GAAIX,GACHpC,GAAS,KAAmB+B,EAAMO,cAAc,OAAQ,CACzDU,cAAe,QACfC,eAAgB,QAChBC,EAAG,4ZAEP,IAGAC,EAAOC,QAAUnB,C","sources":["features/leads/index.js","pages/protected/Leads.js","../node_modules/@heroicons/react/24/outline/TrashIcon.js"],"sourcesContent":["import moment from \"moment\"\r\nimport { useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport TitleCard from \"../../components/Cards/TitleCard\"\r\nimport { openModal } from \"../common/modalSlice\"\r\nimport { deleteLead, getLeadsContent } from \"./leadSlice\"\r\nimport { MODAL_BODY_TYPES } from '../../utils/globalConstantUtil'\r\nimport TrashIcon from '@heroicons/react/24/outline/TrashIcon'\r\nimport { showNotification } from '../common/headerSlice'\r\n\r\nconst TopSideButtons = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const openAddNewLeadModal = () => {\r\n        dispatch(openModal({title : \"Add New Lead\", bodyType : MODAL_BODY_TYPES.LEAD_ADD_NEW}))\r\n    }\r\n\r\n    return(\r\n        <div className=\"inline-block float-right\">\r\n            <button className=\"btn px-6 btn-sm normal-case btn-primary\" onClick={() => openAddNewLeadModal()}>Add New</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Leads(){\r\n\r\n    const {leads } = useSelector(state => state.lead)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getLeadsContent())\r\n    }, [])\r\n\r\n    \r\n\r\n    const getDummyStatus = (index) => {\r\n        if(index % 5 === 0)return <div className=\"badge\">Not Interested</div>\r\n        else if(index % 5 === 1)return <div className=\"badge badge-primary\">In Progress</div>\r\n        else if(index % 5 === 2)return <div className=\"badge badge-secondary\">Sold</div>\r\n        else if(index % 5 === 3)return <div className=\"badge badge-accent\">Need Followup</div>\r\n        else return <div className=\"badge badge-ghost\">Open</div>\r\n    }\r\n\r\n    const deleteCurrentLead = (index) => {\r\n        dispatch(deleteLead({index}))\r\n        dispatch(showNotification({message : \"Lead Deleted!\", status : 1}))\r\n    }\r\n\r\n    return(\r\n        <>\r\n            \r\n            <TitleCard title=\"Current Leads\" topMargin=\"mt-2\" TopSideButtons={<TopSideButtons />}>\r\n\r\n                {/* Leads List in table format loaded from slice after api call */}\r\n            <div className=\"overflow-x-auto w-full\">\r\n                <table className=\"table w-full\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Email Id</th>\r\n                        <th>Created At</th>\r\n                        <th>Status</th>\r\n                        <th>Assigned To</th>\r\n                        <th></th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            leads.map((l, k) => {\r\n                                return(\r\n                                    <tr key={k}>\r\n                                    <td>\r\n                                        <div className=\"flex items-center space-x-3\">\r\n                                            <div className=\"avatar\">\r\n                                                <div className=\"mask mask-squircle w-12 h-12\">\r\n                                                    <img src={l.avatar} alt=\"Avatar\" />\r\n                                                </div>\r\n                                            </div>\r\n                                            <div>\r\n                                                <div className=\"font-bold\">{l.first_name}</div>\r\n                                                <div className=\"text-sm opacity-50\">{l.last_name}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>{l.email}</td>\r\n                                    <td>{moment(new Date()).add(-5*(k+2), 'days').format(\"DD MMM YY\")}</td>\r\n                                    <td>{getDummyStatus(k)}</td>\r\n                                    <td>{l.last_name}</td>\r\n                                    <td><button className=\"btn btn-square btn-ghost\" onClick={() => deleteCurrentLead(k)}><TrashIcon className=\"w-5\"/></button></td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            </TitleCard>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Leads","import { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setPageTitle } from '../../features/common/headerSlice'\r\nimport Leads from '../../features/leads'\r\n\r\nfunction InternalPage(){\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setPageTitle({ title : \"Leads\"}))\r\n      }, [])\r\n\r\n\r\n    return(\r\n        <Leads />\r\n    )\r\n}\r\n\r\nexport default InternalPage","const React = require(\"react\");\n\nfunction TrashIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(TrashIcon);\nmodule.exports = ForwardRef;"],"names":["TopSideButtons","dispatch","useDispatch","className","onClick","openModal","title","bodyType","MODAL_BODY_TYPES","leads","useSelector","state","lead","useEffect","getLeadsContent","TitleCard","topMargin","map","l","k","src","avatar","alt","first_name","last_name","email","moment","Date","add","format","index","deleteLead","showNotification","message","status","deleteCurrentLead","setPageTitle","React","require","ForwardRef","forwardRef","svgRef","titleId","props","createElement","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","module","exports"],"sourceRoot":""}